// Created by Arsh Noor Amin
// for ECEG 431 at Bucknell

/** 3x3 Matrix Data Structure */
class ThreeMatrix {
    field Array r1, r2, r3;     // the arrays for each row of matrix

    /* Construct a new matrix instance */
    constructor ThreeMatrix new() {
        let r1 = Array.new(3);
        let r2 = Array.new(3);
        let r3 = Array.new(3);
        return this;
    }

    /** add/replace an entry in the matrix */
    method void add(int row, int col, int val) {
        if (row = 0) {
            let r1[col] = val;
        }
        if (row = 1) {
            let r2[col] = val;
        }
        if (row = 2) {
            let r3[col] = val;
        }
        return;
    }

    /** checks if the coord in matrix is empty */
    method boolean isEmpty(int row, int col) {
        if (row = 0) {
            if ((r1[col] = 1) | (r1[col] = 2)) {
                return false;
            }
        }
        if (row = 1) {
            if ((r2[col] = 1) | (r2[col] = 2)) {
                return false;
            }
        }
        if (row = 2) {
            if ((r3[col] = 1) | (r3[col] = 2)) {
                return false;
            }
        }
        return true;
    }

    /** check if elements of any of the rows are same */
    method int compareRows() {
        if ((r1[0] = r1[1]) & (r1[1] = r1[2])) {
            if (~(r1[0] = 0)) {
                return r1[0];
            }
        }
        if ((r2[0] = r2[1]) & (r2[1] = r2[2])) {
            if (~(r2[0] = 0)) {
                return r2[0];
            }
        }
        if ((r3[0] = r3[1]) & (r3[1] = r3[2])) {
            if (~(r3[0] = 0)) {
                return r3[0];
            }
        }
        return 0;
    }
    
    /** check if elements of any of the cols are same */
    method int compareCols() {
        if ((r1[0] = r2[0]) & (r2[0] = r3[0])) {
            if (~(r1[0] = 0)) {
                return r1[0];
            }
        }
        if ((r1[1] = r2[1]) & (r2[1] = r3[1])) {
            if (~(r1[1] = 0)) {
                return r1[1];
            }
        }
        if ((r1[2] = r2[2]) & (r2[2] = r3[2])) {
            if (~(r1[2] = 0)) {
                return r1[2];
            }
        }
        return 0;
    }

    /** check if elements of any of the diagonals are same */
    method int compareDiag() {
        if ((r1[0] = r2[1]) & (r2[1] = r3[2])) {
            if (~(r1[0] = 0)) {
                return r1[0];
            }
        }
        if ((r1[2] = r2[1]) & (r2[1] = r3[0])) {
            if (~(r1[2] = 0)) {
                return r1[2];
            }
        }
        return 0;
    }
}